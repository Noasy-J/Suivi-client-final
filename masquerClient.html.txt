<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8" />
  <style>
    :root { --bg:#0f172a; --panel:#111827; --muted:#94a3b8; --text:#e5e7eb;
            --primary:#60a5fa; --primary-2:#2563eb; --danger:#ef4444; --accent:#22d3ee; --chip:#1f2937; }
    *{box-sizing:border-box}
    body{margin:0;padding:16px;background:linear-gradient(180deg,var(--bg),#020617);color:var(--text);font:14px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Arial}
    h2{margin:0 0 12px;font-size:20px;letter-spacing:.2px}
    .card{background:linear-gradient(180deg,rgba(255,255,255,.04),rgba(255,255,255,.02));border:1px solid rgba(255,255,255,.08);border-radius:14px;padding:14px;box-shadow:0 10px 30px rgba(0,0,0,.25)}
    .row{display:flex;gap:10px;align-items:center;margin:10px 0;flex-wrap:wrap}
    label{color:var(--muted);min-width:160px}
    select,input[type="date"]{background:#0b1020;color:var(--text);border:1px solid rgba(255,255,255,.12);border-radius:10px;padding:8px 10px;outline:none;min-width:280px}
    button{background:var(--primary);color:#0b1020;border:none;border-radius:10px;padding:8px 12px;font-weight:600;cursor:pointer;transition:transform .05s ease, filter .15s ease}
    button:hover{filter:brightness(1.1)} button:active{transform:translateY(1px)}
    .btn-ghost{background:transparent;color:var(--primary);border:1px solid var(--primary)}
    .btn-alt{background:var(--primary-2);color:white}
    .btn-danger{background:var(--danger);color:white}
    .sep{height:1px;background:rgba(255,255,255,.08);margin:12px 0}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:14px}
    .section h3{margin:0 0 10px;font-size:16px;color:var(--accent)}
    .item{display:flex;align-items:center;justify-content:space-between;padding:8px 10px;margin:6px 0;background:var(--chip);border:1px solid rgba(255,255,255,.08);border-radius:10px}
    .empty{color:var(--muted);font-style:italic}
    .error{color:#fecaca;background:#7f1d1d;padding:8px 10px;border-radius:10px;border:1px solid #ef4444}
  </style>
</head>
<body>
  <div class="card">
    <h2>Masquer un client</h2>
    <div id="errorBox" class="error" style="display:none;"></div>

    <div class="row">
      <label>Client (feuille ‚ÄúClient R√©gulier‚Äù) :</label>
      <select id="clientSelect"><option>Chargement‚Ä¶</option></select>
    </div>

    <div class="row">
      <label>Masquer jusqu‚Äôau :</label>
      <input type="date" id="dateInput">
      <button type="button" class="btn-alt"   onclick="maskByDate()">Masquer par date</button>
      <button type="button" class="btn-ghost" onclick="maskUntilNext()">Jusqu‚Äô√† la prochaine planification</button>
    </div>

    <div class="sep"></div>

    <div class="grid">
      <div class="section">
        <h3>Clients masqu√©s</h3>
        <div id="maskedList"></div>
      </div>
      <div class="section">
        <h3>Raccourcis</h3>
        <div class="row"><button type="button" onclick="refreshUI()">üîÑ Rafra√Æchir</button></div>
        <div style="color:#9ca3af;font-size:13px">
          La S+1 d‚Äôun client masqu√© est color√©e <b>gris tr√®s fonc√©</b> quand les pr√©visions sont actives.
        </div>
      </div>
    </div>
  </div>

  <!-- Injection des donn√©es pr√©-calcul√©es c√¥t√© serveur -->
  <script>
    const INITIAL = <?!= initialDataJson ?>; // objet {ok, clients, masked, ...}
  </script>

  <script>
    const $ = id => document.getElementById(id);

    function showError(msg){
      const box = $('errorBox'); if(!box) return;
      box.textContent = msg; box.style.display = 'block';
    }
    function clearError(){ const b=$('errorBox'); if(b) b.style.display='none'; }

    // Appel serveur robuste : teste plusieurs noms de fonctions (underscore / sans underscore)
    function callServer(fnNames, args, onOk){
      if (!window.google || !google.script || !google.script.run) {
        showError('google.script.run indisponible dans cette fen√™tre.'); return;
      }
      const names = Array.isArray(fnNames) ? fnNames : [fnNames];
      let i = 0;
      const tryNext = () => {
        const name = names[i++]; if (!name) { showError('Aucune fonction serveur trouv√©e.'); return; }
        try {
          const runner = google.script.run
            .withSuccessHandler(res => {
              if (res && res.ok === false) { showError(res.message || 'Erreur serveur.'); return; }
              clearError(); onOk && onOk(res);
            })
            .withFailureHandler(err => { showError((err && err.message) || 'Erreur Apps Script.'); });
          if (args === undefined) runner[name](); else runner[name](args);
        } catch(e) { tryNext(); }
      };
      tryNext();
    }

    function renderClientsDropdown(list) {
      const sel = $('clientSelect'); sel.innerHTML = '';
      if (!list || !list.length) {
        const o = document.createElement('option'); o.value=''; o.textContent='‚Äî Aucun client (Client R√©gulier) ‚Äî';
        sel.appendChild(o); return;
      }
      list.forEach(c => { const o=document.createElement('option'); o.value=c.key; o.textContent=c.label; sel.appendChild(o); });
    }

    function renderMaskedList(arr) {
      const cont = $('maskedList'); cont.innerHTML = '';
      if (!arr || !arr.length) { cont.innerHTML = '<div class="empty">Aucun client masqu√©.</div>'; return; }
      arr.forEach(m => {
        const div=document.createElement('div'); div.className='item';
        const left=document.createElement('div');
        left.innerHTML = '<b>'+m.label+'</b>' + (m.untilISO ? ' <small>(jusqu‚Äôau '+m.untilISO+')</small>' : '');
        const btn=document.createElement('button'); btn.type='button'; btn.className='btn-danger'; btn.textContent='D√©masquer';
        btn.onclick = () => callServer(['uiUnmaskClient_','uiUnmaskClient'], m.key, () => refreshUI());
        div.appendChild(left); div.appendChild(btn); cont.appendChild(div);
      });
    }

    function hydrateFromInitial() {
      $('dateInput').setAttribute('min', new Date().toISOString().slice(0,10));
      if (!INITIAL || INITIAL.ok === false) { showError((INITIAL && INITIAL.message) || 'Erreur serveur.'); return; }
      clearError();
      renderClientsDropdown(INITIAL.clients);
      renderMaskedList(INITIAL.masked);
    }

    function refreshUI() {
      $('dateInput').setAttribute('min', new Date().toISOString().slice(0,10));
      callServer(['uiListClientsPourMasquageV2_','uiListClientsPourMasquage_'], undefined, (res) => {
        renderClientsDropdown(res.clients);
        renderMaskedList(res.masked);
      });
    }

    function maskByDate() {
      const key = $('clientSelect').value, d = $('dateInput').value;
      if (!key) return alert('S√©lectionnez un client.');
      if (!d)   return alert('Choisissez une date.');
      callServer(['uiMaskClient_','uiMaskClient'], { key, mode:'date', dateISO:d }, () => refreshUI());
    }

    function maskUntilNext() {
      const key = $('clientSelect').value;
      if (!key) return alert('S√©lectionnez un client.');
      callServer(['uiMaskClient_','uiMaskClient'], { key, mode:'next' }, () => refreshUI());
    }

    document.addEventListener('DOMContentLoaded', () => {
      hydrateFromInitial(); // affichage instantan√©
      // refreshUI();       // d√©commente si tu veux recharger c√¥t√© serveur d√®s l‚Äôouverture
    });
  </script>
</body>
</html>
